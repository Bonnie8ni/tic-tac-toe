{"version":3,"sources":["Game.module.scss","Game.js","serviceWorker.js","index.js"],"names":["module","exports","game","board","grid","info","title","btn","toSymbol","n","lines","Game","state","grids","player","winner","getWinner","_this","_iteratorNormalCompletion","_didIteratorError","_iteratorError","undefined","_step","_iterator","Symbol","iterator","next","done","line","value","_line","Object","slicedToArray","i","j","k","err","return","handleClick","idx","toConsumableArray","setState","reset","prevProps","PrevState","this","_this2","_this$state","react_default","a","createElement","className","styles","map","key","concat","onClick","Component","Boolean","window","location","hostname","match","render","src_Game","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.ab81a78a.chunk.js","sourcesContent":["// extracted by mini-css-extract-plugin\nmodule.exports = {\"game\":\"Game_game__1XHqv\",\"board\":\"Game_board__io3jt\",\"grid\":\"Game_grid__11-NJ\",\"info\":\"Game_info__LWR4-\",\"title\":\"Game_title__3Jb9C\",\"btn\":\"Game_btn__2AEmV\"};","import React, { Component } from 'react';\nimport styles from './Game.module.scss';\n\nconst toSymbol = (n) => {\n    switch (n) {\n        case 0:\n            return '';\n        case 1:\n            return 'O';\n        case -1:\n        default:\n            return 'X';\n    }\n}\n\nconst lines = [\n    [0, 1, 2],\n    [3, 4, 5],\n    [6, 7, 8],\n    [0, 3, 6],\n    [1, 4, 7],\n    [2, 5, 8],\n    [0, 4, 8],\n    [2, 4, 6],\n]\n\nclass Game extends Component {\n    state = {\n        grids: [0, 0, 0, 0, 0, 0, 0, 0, 0],\n        player: 1,\n        winner: 0,\n    }\n\n    componentDidUpdate(prevProps, PrevState) {\n        if (PrevState.grids !== this.state.grids) {\n            this.setState({\n                winner: this.getWinner(),\n            })\n        }\n    }\n\n    getWinner = () => {\n        const { grids } = this.state;\n        for (const line of lines) {\n            const [i, j, k] = line;\n            if (grids[i] === grids[j] && grids[j] === grids[k] && grids[i] !== 0) {\n                return grids[i];\n            }\n        }\n        return 0;\n    }\n\n    handleClick = (idx) => () => {\n        if (this.state.winner !== 0) return;\n        const grids = [...this.state.grids];\n        if (grids[idx] !== 0) return;\n\n        grids[idx] = this.state.player;\n        this.setState({\n            grids,\n            player: -this.state.player,\n        })\n    }\n\n    reset = () => {\n        this.setState({\n            grids: [0, 0, 0, 0, 0, 0, 0, 0, 0],\n            player: 1,\n        })\n    };\n\n    render() {\n        const { grids, player, winner } = this.state;\n        return (\n            <div className={styles.game}>\n                <div className={styles.board}>\n                    {\n                        grids.map((n, idx) => (\n                            <div\n                                key={`grid-${idx}`}\n                                className={styles.grid}\n                                onClick={this.handleClick(idx)}\n                            >\n                                <span>{toSymbol(n)}</span>\n                            </div>\n                        ))\n                    }\n                </div>\n                <div className={styles.info}>\n                    <div className={styles.title}><u>TIC TAC TOE</u></div>\n                    PLAYER：{toSymbol(player)}<br />\n                    WINNER：{toSymbol(winner)}<br />\n                    <button\n                        className={styles.btn}\n                        onClick={this.reset}\n                    >\n                        RESET                                                              \n                    </button>\n                </div>\n            </div>\n        );\n    }\n}\n\nexport default Game;","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport { render } from 'react-dom';\nimport Game from './Game';\nimport * as serviceWorker from './serviceWorker';\n\nrender(<Game />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}